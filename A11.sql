--70
ALTER TABLE VIDEO
ADD VID_STATUS VARCHAR(4)
DEFAULT 'IN' NOT NULL
CHECK (VID_STATUS IN ('IN', 'OUT', 'LOST'))

--71
UPDATE VIDEO
SET VID_STATUS = 'OUT'
WHERE VID_NUM IN (SELECT VID_NUM
                  FROM DETAILRENTAL
                  WHERE DETAIL_RETURNDATE IS NULL)

--72
ALTER TABLE PRICE
ADD PRICE_RENTDAYS NUMERIC(2,0) DEFAULT 3 NOT NULL

--78

CREATE OR REPLACE PROCEDURE PRC_NEW_DETAIL
(
  L_VID_NUM IN VIDEO.VID_NUM%TYPE
)

AS

L_VID_COUNT         NUMBER;
L_VID_STATUS        VIDEO.VID_STATUS%TYPE
L_VID_RENTFEE       PRICE.PRICE_RENTFEE%TYPE
L_VID_DAILYLATEFEE  PRICE.PRICE_DAILYLATEFEE%TYPE
L_VID_RENTDAYS      PRICE.PRICE_RENTDAYS%TYPE
L_VID_DUEDATE       DATE


BEGIN
  SELECT COUNT(VID_NUM)
  INTO L_VID_COUNT
  FROM VIDEO
  WHERE VID_NUM = L_VID_NUM

  IF L_VID_COUNT = 1 THEN
    SELECT VID_STATUS
    INTO L_VID_STATUS
    FROM VIDEO
    WHERE VID_NUM = L_VID_NUM

    IF UPPER(L_VID_STATUS) = 'IN' THEN
      SELECT PRICE_RENTFEE, PRICE_DAILYLATEFEE, PRICE_RENTDAYS
      INTO L_VID_RENTFEE, L_VID_DAILYLATEFEE, L_VID_RENTDAYS
      FROM PRICE JOIN (SELECT PRICE_CODE
                       FROM MOVIE JOIN (SELECT MOVIE_NUM
                                        FROM VIDEO
                                        WHERE VID_NUM = L_VID_NUM)
                                  USING(MOVIE_NUM))
                                  USING(PRICE_CODE)

      L_VID_DUEDATE := TRUNC(SYSDATE) + 86399/86400 + L_VID_RENTDAYS

      INSERT INTO DETAILRENTAL
      (RENT_NUM, VID_NUM, DETAIL_FEE, DETAIL_DUEDATE, DETAIL_RETURNDATE, DETAIL_DAILYLATEFEE)
      VALUES
      (RENT_NUM_SEQ.CURRVAL, L_VID_NUM, L_VID_RENTFEE, L_VID_DUEDATE, NULL, L_VID_DAILYLATEFEE)
    ELSE
      DBMS_OUTPUT.PUT_LINE('The video must be returned before it can be rented out again.')
    END IF
  ELSE
    DBMS_OUTPUT.PUT_LINE('Video not found. Please check the video number.')
  END IF
END PRC_NEW_DETAIL


--79
CREATE OR REPLACE PROCEDURE PRC_RETURN_VIDEO
(
  L_VID_NUM IN VIDEO.VID_NUM%TYPE
)

AS

L_VID_COUNT NUMBER;
L_VID_DETAILCOUNT NUMBER

BEGIN
  SELECT  COUNT(VID_NUM)
  INTO    L_VID_COUNT
  FROM    VIDEO
  WHERE   VID_NUM = L_VID_NUM

  IF L_VID_COUNT = 1 THEN
    SELECT  COUNT(VID_NUM)
    INTO    L_VID_DETAILCOUNT
    FROM    DETAILRENTAL
    WHERE   VID_NUM = L_VID_NUM
    AND     DETAIL_RETURNDATE IS NULL

    IF L_VID_DETAILCOUNT > 1 THEN
      DBMS_OUTPUT.PUT_LINE('This video has multiple outstanding rentals.')
      RETURN
    END IF

    IF L_VID_DETAILCOUNT = 0 THEN
      UPDATE VIDEO
      SET VID_STATUS = 'IN'
      WHERE VID_NUM = L_VID_NUM;
      DBMS_OUTPUT.PUT_LINE('This video has no outstanding rentals and is  available for rent.')
      RETURN
    END IF

    IF L_VID_DETAILCOUNT = 1 THEN
      UPDATE DETAILRENTAL
      SET DETAIL_RETURNDATE = SYSDATE
      WHERE VID_NUM = L_VID_NUM
      AND DETAIL_RETURNDATE IS NULL

      UPDATE VIDEO
      SET VID_STATUS = 'IN'
      WHERE VID_NUM = L_VID_NUM;

      DBMS_OUTPUT.PUT_LINE('Video successfully returned.')
    END IF
  ELSE
    DBMS_OUTPUT.PUT_LINE('Video not found. Check the video number.')
  END IF
END PRC_RETURN_VIDEO
